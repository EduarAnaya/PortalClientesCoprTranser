@model PortalClientesCoprTranser.Models.administracion.AccountViewModel

@{
    ViewBag.Title = @ViewBag.Title;
    Layout = "~/Views/_Layouts/_LayoutLogin.cshtml";
}
<div class="container ContAppLogin">
    @{using (Html.BeginForm("Login", "Login", new { ReturnUrl = @ViewBag.ReturnUrl }, FormMethod.Post, new { id = "formLogin", @class = "form-signin needs-validation", novalidate = "" }))
      {

        <img class="mb-4 img-Logo" src="~/Recursos/img/logSecure128x128.png" alt="" width="128" />
        <h5 class="mb-3 font-weight-normal">Autenticación de usuarios</h5>
       
        <div class="form-group">
            @Html.TextBoxFor(m => m.Account.EMAIL, htmlAttributes: new { type = "Email", id = "inputUsuario", @class = "form-control item-center ", placeholder = "Correo Electronico", required = "True", autofocus = "" })
            <div class="invalid-feedback">
                Por favor indique una dirección de correo.
            </div>
        </div>
        <div class="form-group">
            @Html.PasswordFor(m => m.Account.CONTRASEÑA_ACTUAL, htmlAttributes: new { type = "password", id = "inputContraseña", @class = "form-control item-center ", placeholder = "Contraseña", required = "" })
            <div class="invalid-feedback">
                Por favor indique una Contraseña.
            </div>
        </div>
         
        
          if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
          {
        <div class="alert alert-warning">
            <a href="#" class="close" data-dismiss="alert">×</a>
            @Html.ValidationMessage("ErrorLogin")
        </div>
          }
        <button id="SendLogin" class="btn btn-lg btn-primary btn-block" type="submit">Ingresar</button>
        <p class="mt-5 mb-3 text-muted">&copy Transer @DateTime.Now.Year</p>
      }
        
    }

    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
</div>
